// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for TransactionType.
const (
	TopUp       TransactionType = "TopUp"
	TransferOut TransactionType = "TransferOut"
)

// GetUserResponse defines model for GetUserResponse.
type GetUserResponse struct {
	Header ResponseHeader `json:"header"`
	User   User           `json:"user"`
}

// RegisterUserResponse defines model for RegisterUserResponse.
type RegisterUserResponse struct {
	Header ResponseHeader `json:"header"`
	User   User           `json:"user"`
}

// ResponseHeader defines model for ResponseHeader.
type ResponseHeader struct {
	// Messages Array of error message(s).
	Messages []string `json:"messages"`

	// Success Boolean to denote whether response is OK or not.
	Success bool `json:"success"`
}

// Transaction defines model for Transaction.
type Transaction struct {
	Amount      *float32         `json:"amount,omitempty"`
	Description *string          `json:"description,omitempty"`
	Id          *string          `json:"id,omitempty"`
	Password    *string          `json:"password,omitempty"`
	RecipientId *int64           `json:"recipient_id,omitempty"`
	Type        *TransactionType `json:"type,omitempty"`
	UserId      *int64           `json:"user_id,omitempty"`
}

// TransactionType defines model for Transaction.Type.
type TransactionType string

// TransactionResponse defines model for TransactionResponse.
type TransactionResponse struct {
	Header      ResponseHeader `json:"header"`
	Transaction Transaction    `json:"transaction"`
}

// User defines model for User.
type User struct {
	Balance *float32 `json:"balance,omitempty"`

	// FullName User's full name.
	FullName *string `json:"full_name,omitempty"`
	Id       *int64  `json:"id,omitempty"`

	// Password User's password.
	Password *string `json:"password,omitempty"`

	// PhoneNumber User's phone number.
	PhoneNumber *string `json:"phone_number,omitempty"`
}

// UserLoginResponse defines model for UserLoginResponse.
type UserLoginResponse struct {
	Header ResponseHeader `json:"header"`
	User   User           `json:"user"`
}

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = User

// UserLoginJSONRequestBody defines body for UserLogin for application/json ContentType.
type UserLoginJSONRequestBody = User

// CreateUserTransactionJSONRequestBody defines body for CreateUserTransaction for application/json ContentType.
type CreateUserTransactionJSONRequestBody = Transaction

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get an existing user
	// (GET /v1/user)
	GetUser(ctx echo.Context) error
	// Create a new user
	// (POST /v1/user)
	RegisterUser(ctx echo.Context) error
	// Existing user login
	// (POST /v1/user/login)
	UserLogin(ctx echo.Context) error
	// Create a new transaction for a specific user
	// (POST /v1/user/{user_id}/transactions)
	CreateUserTransaction(ctx echo.Context, userId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx)
	return err
}

// RegisterUser converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegisterUser(ctx)
	return err
}

// UserLogin converts echo context to params.
func (w *ServerInterfaceWrapper) UserLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserLogin(ctx)
	return err
}

// CreateUserTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUserTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUserTransaction(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/user", wrapper.GetUser)
	router.POST(baseURL+"/v1/user", wrapper.RegisterUser)
	router.POST(baseURL+"/v1/user/login", wrapper.UserLogin)
	router.POST(baseURL+"/v1/user/:user_id/transactions", wrapper.CreateUserTransaction)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWbW/kNBD+K5ZBAqTQbLmCRL7REy8VoJOO9tOpqrzOZNenxDbjyZZqlf+Oxk662a73",
	"rlQL6D419c7r8zwez1Zq13lnwVKQ1VYGvYZOxc+fgW4C4FsI3tkAfOTReUAyEA3WoGpA/vocoZGV/Kzc",
	"BSvHSOXk/0uyHgrZh497cWY5DIVE+LM3CLWs3k0Jxwi3haQHD7KSbvkeNHHot7AygQA/wcL3kh2U3EEI",
	"apW+awgajSfjrKzkD4jqQbhGAKJDMRp+Gb46k4U0BF30GRMGQmNXnHA8UOzN/4deawiZ+JfOtaCsICdq",
	"sI5A3K+B1oACx5qFCeLNr8KhsI446xh7mTwP0JhSFbuucpBco7JB6VTGUzxU53pL/NU47BTJSjatU7TL",
	"bvtumWjb6ycDhamzx16FcO8w/yOCNt6Apbvk/ViFsfTdxa4KYwlWqYx0spVg+45hiP01gG96rvra+Rs/",
	"w2GXijXz3CzDh3E8/ZWgfZI+5Dzn8+gFmcfLieIm5G7HUrXKanieHJq+be+s6uBQ6xz9iyDYQrDFTMxP",
	"5fIMwucCyuaZDLJp/NpZuBvLPhqBjUQyykQZjiD4m1sZ+wnNR7Y3tnEcvDUaxqoTifL3q+soRUMtjNCI",
	"PwA3RoMs5AYwJMzOzxZnC7Z0HqzyRlbyVTxiqmgdWy835+XUxgrigGFkFMN+VctqehUlN5D6j37fLBb8",
	"RztLkOaS8r41OjqW70O6HgmEj0H09OGN7R/SLzSCIqjFOE9ZtXGUXyxeHQrmJ4dLU9dg2eLbVO2+xZUl",
	"QKtaEQA3gOk9iVSFvusUPqTuhbIC/jKBjF2JCBWL1YUMVvPXWCbGIdClqx9OhtUopz09EfYwHPBzfrKc",
	"2SXjn5OUoeBS1WJESXwtruxGtaYWxvqeks/3hz6vnW1ak+72i3l9HasUSli4H0kdisfLULY8L+KcyPL8",
	"OFL+d5IXJ825PyYzDEeDGbUvJfbFvP04v4gi0bTH3HbcHoZy9rKG41QmIXDz8+eaBySqDggwyOrdVrIa",
	"4tCUxTSFpzXlKUnFDPCDdeX23xHM/qrxnw6H3LaVUc7M7MQj4iK/LPBuLhrX2/p0g2ImKdE4FEoED9o0",
	"Rk8zhH1jsCSbHltZyTWRr8qydVq1a1bhcDv8HQAA///W1FowiA4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
